name: Flow pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main     
  # To run a workflow manually, the workflow must be configured to run on the workflow_dispatch event.
  workflow_dispatch:
      
jobs:
  doc:
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - id: clang-15
            name: clang
            version: 15
            c-path: /usr/bin/clang-15
            cpp-path: /usr/bin/clang++-15
        build-config:
          - id: release
            conan-profile-build-type: Release
            conan-preset: release
          
    runs-on: ubuntu-22.04

    name: |
      doc-${{ matrix.compiler.id }}-${{ matrix.build-config.id }}
    
    steps:   
    - name: Checkout Flow repository
      uses: actions/checkout@v4
    
    - name: Update available software list for apt-get
      run: sudo apt-get update
    
    - name: Install Flow dependencies (like Graphviz) with apt-get
      run: |
        sudo apt-get install -y graphviz

    - name: Install the latest version of Conan which is less than 2
      run: |
        pip install "conan<2"
      
    - name: Create Conan profile
      run: |
        cat <<EOF > conan_profile   
        [settings]
        compiler = ${{ matrix.compiler.name }}
        compiler.version = ${{ matrix.compiler.version }}
        compiler.cppstd = 17
        compiler.libcxx = libstdc++11
        arch = x86_64
        os = Linux
        build_type = ${{ matrix.build-config.conan-profile-build-type }}

        [conf]
        tools.build:compiler_executables = { "c": "${{ matrix.compiler.c-path }}", "cpp": "${{ matrix.compiler.cpp-path }}" }
        tools.env.virtualenv:auto_use = True 

        [buildenv]
        CC = ${{ matrix.compiler.c-path }}
        CXX = ${{ matrix.compiler.cpp-path }}

        [options]
        flow:build = False
        flow:doc = True
        EOF
    
    - name: Install Flow dependencies (like Doxygen) with Conan using the profile
      run: |
        conan install \
          . \
          --profile:build conan_profile \
          --profile:host conan_profile \
          --build missing

    - name: Generate code documentation using Conan and Doxygen
      run: |
        conan build .

    - name: Create documentation tarball (full, API-only, landing page)
      run: |
        cd $GITHUB_WORKSPACE/doc/flow_doc
        $GITHUB_WORKSPACE/tools/doc/stage_generated_docs.sh $GITHUB_WORKSPACE/build/${{ matrix.build-config.conan-profile-build-type }}

         # Save runner space.
        rm -rf generated

    - name: Upload documentation tarball
      uses: actions/upload-artifact@v3
      with:
        name: flow-doc-${{ matrix.compiler.id }}-${{ matrix.build-config.id }}
        path: |
          ${{ github.workspace }}/doc/flow_doc.tgz
  
  build:
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - id: gcc-9
            name: gcc
            version: 9
            c-path: /usr/bin/gcc-9
            cpp-path: /usr/bin/g++-9  
          - id: gcc-10
            name: gcc
            version: 10
            c-path: /usr/bin/gcc-10
            cpp-path: /usr/bin/g++-10
          - id: gcc-11
            name: gcc
            version: 11
            c-path: /usr/bin/gcc-11
            cpp-path: /usr/bin/g++-11
          - id: gcc-13
            name: gcc
            version: 13
            c-path: /usr/bin/gcc-13
            cpp-path: /usr/bin/g++-13        
          - id: clang-13
            name: clang
            version: 13
            c-path: /usr/bin/clang-13
            cpp-path: /usr/bin/clang++-13  
          - id: clang-15
            name: clang
            version: 15
            c-path: /usr/bin/clang-15
            cpp-path: /usr/bin/clang++-15     
          - id: clang-16
            name: clang
            version: 16 
            c-path: /usr/bin/clang-16 
            cpp-path: /usr/bin/clang++-16
            install: True      
          - id: clang-17 
            name: clang
            version: 17
            c-path: /usr/bin/clang-17
            cpp-path: /usr/bin/clang++-17
            install: True     
        build-and-test-config:
          - id: debug
            conan-profile-build-type: Debug     
          - id: release
            conan-profile-build-type: Release   
          - id: relwithdebinfo-tsan 
            conan-profile-build-type: RelWithDebInfo
            conan-profile-custom-conf: |
              tools.build:cflags = [ "-fsanitize=thread" ]
              tools.build:cxxflags = [ "-fsanitize=thread" ]
              tools.build:sharedlinkflags = [ "-fsanitize=thread" ]
              tools.build:exelinkflags = [ "-fsanitize=thread" ]
            conan-profile-custom-settings: |
              compiler.sanitizer = thread   
            conan-custom-settings-definitions: |
              data['compiler']['gcc']['sanitizer'] = ['None', 'address', 'thread', 'memory', 'undefined-behavior']
              data['compiler']['clang']['sanitizer'] = ['None', 'address', 'thread', 'memory', 'undefined-behavior']
          - id: relwithdebinfo
            conan-profile-build-type: RelWithDebInfo  
          - id: minsizerel
            conan-profile-build-type: MinSizeRel
            
        exclude:
          - compiler:  { id: gcc-9 }
            build-and-test-config: { id: relwithdebinfo-tsan }
          - compiler:  { id: gcc-10 }
            build-and-test-config: { id: relwithdebinfo-tsan }
          - compiler:  { id: gcc-11 }
            build-and-test-config: { id: relwithdebinfo-tsan }
          - compiler:  { id: gcc-13 }
            build-and-test-config: { id: relwithdebinfo-tsan }
   
    runs-on: ubuntu-22.04

    name: |
      build-${{ matrix.compiler.id }}-${{ matrix.build-and-test-config.id }}

    env: 
      setup-tests-env: |
        if [ "${{ matrix.build-and-test-config.id }}" = relwithdebinfo-tsan ]; then
          export TSAN_OPTIONS="disable_coredump=0 second_deadlock_stack=1 suppressions=${{ github.workspace }}/tsan_suppressions_${{ matrix.compiler.name }}_${{ matrix.compiler.version }}.cfg"
        fi
        
    steps:   
    - name: Checkout Flow repository
      uses: actions/checkout@v4
    
    - name: Update available software list for apt-get
      run: sudo apt-get update
    
    - name: Install clang compiler
      if: |
        matrix.compiler.install && matrix.compiler.name == 'clang'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod u+x llvm.sh
        sudo ./llvm.sh ${{ matrix.compiler.version }}
  
    - name: Install GCC compiler
      if: |
        matrix.compiler.install && matrix.compiler.name == 'gcc'
      run: |
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.compiler.version }} g++-${{ matrix.compiler.version }}

    - name: Install the latest version of Conan which is less than 2
      run: |
        pip install "conan<2"
    
    - name: Add custom settings for Conan packages
      run: |
        conan config init
        
        pip install PyYAML

        CONAN_SETTINGS_PATH=$(conan config home)/settings.yml

        python -c "
        import yaml

        with open('$CONAN_SETTINGS_PATH', 'r') as file:
          data = yaml.safe_load(file)
        
        ${{ matrix.build-and-test-config.conan-custom-settings-definitions }}
      
        with open('$CONAN_SETTINGS_PATH', 'w') as file:
          yaml.dump(data, file)
        "
      if: |
        matrix.build-and-test-config.conan-custom-settings-definitions
        
    - name: Create Conan profile
      run: |
        cat <<EOF > conan_profile   
        [settings]
        compiler = ${{ matrix.compiler.name }}
        compiler.version = ${{ matrix.compiler.version }}
        compiler.cppstd = 17
        # TODO: Consider testing with LLVM-libc++ also (with clang anyway).
        compiler.libcxx = libstdc++11
        arch = x86_64
        os = Linux
        build_type = ${{ matrix.build-and-test-config.conan-profile-build-type }}
        ${{ matrix.build-and-test-config.conan-profile-custom-settings }}
        
        [conf]
        tools.build:compiler_executables = {"c": "${{ matrix.compiler.c-path }}", "cpp": "${{ matrix.compiler.cpp-path }}"}
        tools.env.virtualenv:auto_use = True
        ${{ matrix.build-and-test-config.conan-profile-custom-conf }}

        [buildenv]
        CC = ${{ matrix.compiler.c-path }}
        CXX = ${{ matrix.compiler.cpp-path }}

        [options]
        flow:build = True
        flow:doc = False
        EOF
    
    - name: Install Flow dependencies with Conan using the profile
      run: |
        conan install \
          . \
          --profile:build conan_profile \
          --profile:host conan_profile \
          --build missing
    
    - name: Build library and demos/tests with Conan
      run: |
        conan build .

    - name: Install targets with Makefile
      run: |
        VERBOSE=1 make install \
          --directory $GITHUB_WORKSPACE/build/${{ matrix.build-and-test-config.conan-profile-build-type }} \
          DESTDIR=${{ github.workspace }}/install/${{ matrix.build-and-test-config.conan-profile-build-type }}

    - name: Run 'NetFlow echo' demo/test
      run: |
          ${{ env.setup-tests-env }}
          cd ${{ github.workspace }}/install/${{ matrix.build-and-test-config.conan-profile-build-type }}/usr/local/bin
          ./net_flow_echo_srv.exec 8888 localhost & 
          sleep 1
          ./net_flow_echo_cli.exec 1 127.0.01 8888 "Hello world!"
